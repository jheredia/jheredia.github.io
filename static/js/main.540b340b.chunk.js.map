{"version":3,"sources":["components/sidebar/Sidebar.jsx","constants/Constants.js","components/avatar/Avatar.jsx","components/section/Section.jsx","components/about/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_ref","children","contentTop","darkMode","sections","side","open","toggleSidebar","console","log","react_default","a","createElement","Col","xs","className","concat","map","section","href","link","title","defaultProps","Components","name","Sections","component","display","Avatar","alignment","altText","frame","imageUrl","src","alt","Section","Row","id","About","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sidebar","value","state","setState","leftSidebarOpen","rightSidebarOpen","_this2","Container","fluid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.540b340b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Col } from \"reactstrap\";\n/**\n * Children: Content to show inside the sidebar.\n * ContentTop: (True/False) Determines if the content should at the top of the sidebar or not.\n * DarkMode: (True/False) if the color palette should be dark or not.\n * Sections: Links to be shown.\n * Side: ('left', 'right') Which side should this sidebar show.\n * Open: (True/False) if this sidebar should be open or not.\n * ToggleSidebar: Function to be called when the toggle button is clicked. // Unused right now.\n **/\nexport default function Sidebar({\n  children,\n  contentTop,\n  darkMode,\n  sections,\n  side,\n  open,\n  toggleSidebar\n}) {\n  console.log(sections);\n  // Children is the content that you will want to show inside this sidebar.\n  return (\n    <Col\n      xs=\"2\"\n      className={`d-flex flex-column sidebar ${side} ${\n        darkMode ? \"dark\" : \"\"\n      } ${open ? \"open\" : \"hidden\"}`}\n    >\n      {contentTop && children}\n      {sections.map(section => {\n        return (\n          <div><a href={'#'+section.link}>{section.title}</a></div>\n        );\n      })}\n      {!contentTop && children}\n      {/* <Button block className={`mt-auto sidebar-button ${side==='right' ? 'float-left': 'float-right'}`} onClick={toggleSidebar}>{`${open? 'close':'open'}`}</Button> */}\n    </Col>\n  );\n}\n\nSidebar.defaultProps = {\n  contentTop: true,\n  darkMode: false,\n  sections: [],\n  side: \"left\",\n  open: true\n};\n\nSidebar.propTypes = {\n  darkMode: PropTypes.bool,\n  sections: PropTypes.arrayOf(PropTypes.object),\n  side: PropTypes.string,\n  open: PropTypes.bool,\n  toggleSidebar: PropTypes.func.isRequired,\n  children: PropTypes.object\n};\n","// Default avatar URL\nexport const AvatarUrl =\n  \"https://avatars1.githubusercontent.com/u/3941955?s=460&v=4\";\n\n// Avatar available frame types\nexport const CircleFrame = \"circle\";\nexport const RoundedFrame = \"rounded\";\nexport const SquareFrame = \"square\";\nexport const ThumbnailFrame = \"img-thumbnail\";\n\n// Components definition\nexport const Components = {\n  about: {name: 'About'},\n  education: {name: 'Education'},\n  portfolio: {name: 'Portfolio'},\n  references: {name: 'References'},\n  skills: {name: 'Skills'},\n  work: {work: 'Work'},\n}\n\n// Sections anchors and definitions\nexport const Sections = [\n  { title: \"About\", link: 'about', component: 'About', display: true},\n  { title: \"Skills\", link: 'skills', component: 'Skills', display: true },\n  { title: \"Work\", link: 'work', component: 'Work', display: true },\n  { title: \"Education\", link: 'education', component: 'Education', display: true },\n  { title: \"Portfolio\", link: 'portfolio', component: 'Portfolio', display: true },\n  { title: \"References\", link: 'references', component: 'References', display: true }\n];\n\n// Proficiencies\nexport const Languages = [\n  { name: 'Javascript', skill: 90},\n  { name: 'Java', skill: 85},\n  { name: 'SQL', skill: 65},\n  { name: 'Python', skill: 45},\n  { name: 'HTML', skill: 80},\n  { name: 'CSS', skill: 75},\n];\n\nexport const Frameworks = [\n  { name: 'React', skill: 85},\n  { name: 'Angular', skill: 60},\n  { name: 'Django', skill: 45},\n]\n\nexport const Environments = [\n  { name: 'Node.js', skill: 60},\n  { name: 'Apache Tomcat', skill: 60},\n]\n\nexport const ContactInformation = {\n  email: 'joaquinheredia93@gmail.com',\n}\n\nexport const SocialLinks = {\n  linkedin: '',\n  medium: '',\n  github: '',\n  stackoverflow: '',\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AvatarUrl as defaultUrl,\n  CircleFrame,\n  SquareFrame,\n  ThumbnailFrame,\n  RoundedFrame\n} from \"constants/Constants\";\nimport {} from \"reactstrap\";\n\nexport default function Avatar({\n  alignment,\n  altText,\n  darkMode,\n  frame,\n  imageUrl\n}) {\n  return (\n    <div>\n      <img\n        src={imageUrl}\n        alt={altText}\n        className={`img-fluid ${darkMode ? \"dark\" : \"\"} ${frame}`}\n      />\n    </div>\n  );\n}\n\nAvatar.defaultProps = {\n  alignment: \"center\",\n  altText: \"Avatar\",\n  darkMode: false,\n  frame: RoundedFrame,\n  imageUrl: defaultUrl\n};\n\nAvatar.propTypes = {\n  altText: PropTypes.string,\n  darkMode: PropTypes.bool,\n  frame: PropTypes.oneOf([\n    CircleFrame,\n    RoundedFrame,\n    SquareFrame,\n    ThumbnailFrame\n  ]),\n  imageUrl: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Col, Row} from 'reactstrap';\n/**\n* This component represents a section inside the main page, the content inside\n* it should be related and will be accessible with a link.\n* Children: The content to be displayed inside this section.\n* DarkMode: (True/False) Tells the component to be displayed with a dark color palette.\n* Link: The link to access this section.\n* Title: The title of this section.\n**/\nexport default function Section({\n  children,\n  darkMode,\n  link,\n  title,\n}) {\n  // This component should be just a single row with a wrapping colum for the content.\n  return (\n    <Row>\n      <Col>\n        <section>\n          <h1 id={link}>{title}</h1>\n          <hr/>\n          <p>\n            {children}\n          </p>\n        </section>\n      </Col>\n    </Row>\n  )\n}\n\nSection.defaultProps = {\n  darkMode: false,\n  title: 'section',\n}\n\nSection.propTypes = {\n  children: PropTypes.object,\n  darkMode: PropTypes.bool,\n  link: PropTypes.string,\n  title: PropTypes.string,\n}\n","import React from \"react\";\nimport { Col, Row } from \"reactstrap\";\n/**\n * This component defines the content to be displayed in the about section.\n **/\nexport default function About() {\n  return (\n    <Row>\n      <Col>\n        <p>\n          From Río Cuarto, Córdoba, Argentina and. Born on the 20th of January\n          of 1993. Software developer with 5+ years of experience distributed\n          between Java and most recently web projects developed with Angular and\n          React frameworks.\n        </p>\n        <p>\n          Fast learner, interested in projects that represents a challenge to\n          step up my skills and possibly a contribution to the software\n          community.\n        </p>\n        <p>\n          Experienced in guidance and teaching roles, participated as a mentor\n          on workshops such as Django Girls and Conectar Igualdad. Good\n          capability of team management to obtain the best results according to\n          time and resources available.\n        </p>\n        <p>\n          Strong communication skills, both verbal and written, used to handle\n          interactions between team members and clients, capable of public\n          speaking and open to collaboration with others.\n        </p>\n        <p>\n          Experience with scalable software design, strategic planning of\n          projects, data structures and design patterns. Currently learning how\n          to adapt college knowledge to the web development and improve daily\n          based on that. Open to learn from mistakes as they are the only way we\n          can improve.\n        </p>\n      </Col>\n    </Row>\n  );\n}\n","import React, { Component } from \"react\";\nimport Sidebar from \"components/sidebar/Sidebar\";\nimport Avatar from \"components/avatar/Avatar\";\nimport Section from \"components/section/Section\";\nimport About from 'components/about/About';\nimport { Container, Row, Col } from \"reactstrap\";\nimport { Sections, Components } from \"constants/Constants\";\nimport \"App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leftSidebarOpen: true,\n      rightSidebarOpen: true\n    };\n  }\n  toggleSidebar = sidebar => {\n    let value = this.state[sidebar + \"SidebarOpen\"];\n    let state = this.state;\n    state[sidebar + \"SidebarOpen\"] = !value;\n    this.setState(state);\n  };\n  render() {\n    return (\n      <Container fluid={true}>\n        <Row>\n          {/*Left sidebar with anchor links to sections of the resume*/}\n          <Sidebar\n            open={this.state.leftSidebarOpen}\n            side={\"left\"}\n            sections={Sections}\n            toggleSidebar={() => this.toggleSidebar(\"left\")}\n          >\n            <div className=\"mt-3\">\n              <Avatar frame={\"img-thumbnail\"} />\n            </div>\n          </Sidebar>\n          {/*Main content of the resume*/}\n          <Col className=\"main-content\">\n            {/*Render each section and determine which component should be a child with switch*/}\n            {Sections.map(section => {\n              let component;\n              switch (section.component) {\n                case Components.about.name:\n                  component = <About/>;\n                  break;\n\n                default:\n                  component = null;\n              }\n              return (<Section title={section.title} link={section.link}>\n                {component}\n              </Section>);\n            })}\n          </Col>\n          {/*Right sidebar with useful links to social media and contact.*/}\n          <Sidebar\n            open={this.state.rightSidebarOpen}\n            side={\"right\"}\n            toggleSidebar={() => this.toggleSidebar(\"right\")}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}