{"version":3,"sources":["components/sidebar/Sidebar.jsx","components/avatar/Avatar.jsx","constants/Constants.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_ref","children","darkMode","side","sections","open","toggleSidebar","react_default","a","createElement","Col","xs","className","concat","defaultProps","Avatar","alignment","altText","frame","imageUrl","src","alt","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sidebar","value","state","setState","leftSidebarOpen","rightSidebarOpen","_this2","Container","fluid","Row","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAYe,SAASA,EAATC,GAOZ,IANDC,EAMCD,EANDC,SACAC,EAKCF,EALDE,SAEAC,GAGCH,EAJDI,SAICJ,EAHDG,MACAE,EAECL,EAFDK,KAECL,EADDM,cAGA,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAG,IACHC,UAAS,8BAAAC,OAAgCV,EAAhC,KAAAU,OACPX,EAAW,OAAS,GADb,KAAAW,OAELR,EAAO,OAAS,WAEnBJ,GAMPF,EAAQe,aAAe,CACrBZ,UAAU,EACVE,SAAU,GACVD,KAAM,OACNE,MAAM,GC3BO,SAASU,EAATf,GAMZA,EALDgB,UAKC,IAJDC,EAICjB,EAJDiB,QACAf,EAGCF,EAHDE,SACAgB,EAEClB,EAFDkB,MACAC,EACCnB,EADDmB,SAEA,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEW,IAAKD,EACLE,IAAKJ,EACLL,UAAS,aAAAC,OAAeX,EAAW,OAAS,GAAnC,KAAAW,OAAyCK,MAM1DH,EAAOD,aAAe,CACpBE,UAAW,SACXC,QAAS,SACTf,UAAU,EACVgB,MC3B0B,UD4B1BC,SChCA,kFC0CaG,qBAtCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRjB,cAAgB,SAAAyB,GACd,IAAIC,EAAQR,EAAKS,MAAMF,EAAU,eAC7BE,EAAQT,EAAKS,MACjBA,EAAMF,EAAU,gBAAkBC,EAClCR,EAAKU,SAASD,IATdT,EAAKS,MAAQ,CACXE,iBAAiB,EACjBC,kBAAkB,GAJHZ,wEAaV,IAAAa,EAAAV,KACP,OACEpB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAWC,OAAO,GAChBhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACV,EAAD,CACEM,KAAMsB,KAAKM,MAAME,gBACjBhC,KAAM,OACNG,cAAe,kBAAM+B,EAAK/B,cAAc,UAExCC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAACM,EAAD,CAAQG,MAAO,oBAGnBX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKE,UAAU,iBACfL,EAAAC,EAAAC,cAACV,EAAD,CACEM,KAAMsB,KAAKM,MAAMG,iBACjBjC,KAAM,QACNG,cAAe,kBAAM+B,EAAK/B,cAAc,qBA/BlCmC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a0c304b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Col } from \"reactstrap\";\n/**\n * Children: Content to show inside the sidebar.\n * DarkMode: (True/False) if the color palette should be dark or not.\n * Sections: Links to be shown.\n * Side: ('left', 'right') Which side should this sidebar show.\n * Open: (True/False) if this sidebar should be open or not.\n * ToggleSidebar: Function to be called when the toggle button is clicked. // Unused right now.\n **/\nexport default function Sidebar({\n  children,\n  darkMode,\n  sections,\n  side,\n  open,\n  toggleSidebar\n}) {\n  // Children is the content that you will want to show inside this sidebar.\n  return (\n    <Col\n      xs=\"2\"\n      className={`d-flex flex-column sidebar ${side} ${\n        darkMode ? \"dark\" : \"\"\n      } ${open ? \"open\" : \"hidden\"}`}\n    >\n      {children}\n      {/* <Button block className={`mt-auto sidebar-button ${side==='right' ? 'float-left': 'float-right'}`} onClick={toggleSidebar}>{`${open? 'close':'open'}`}</Button> */}\n    </Col>\n  );\n}\n\nSidebar.defaultProps = {\n  darkMode: false,\n  sections: [],\n  side: \"left\",\n  open: true\n};\n\nSidebar.propTypes = {\n  darkMode: PropTypes.bool,\n  sections: PropTypes.array.isRequired,\n  side: PropTypes.string,\n  open: PropTypes.bool,\n  toggleSidebar: PropTypes.func.isRequired,\n  children: PropTypes.object\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AvatarUrl as defaultUrl,\n  CircleFrame,\n  SquareFrame,\n  ThumbnailFrame,\n  RoundedFrame\n} from \"constants/Constants\";\nimport {} from \"reactstrap\";\n\nexport default function Avatar({\n  alignment,\n  altText,\n  darkMode,\n  frame,\n  imageUrl\n}) {\n  return (\n    <div>\n      <img\n        src={imageUrl}\n        alt={altText}\n        className={`img-fluid ${darkMode ? \"dark\" : \"\"} ${frame}`}\n      />\n    </div>\n  );\n}\n\nAvatar.defaultProps = {\n  alignment: \"center\",\n  altText: \"Avatar\",\n  darkMode: false,\n  frame: RoundedFrame,\n  imageUrl: defaultUrl\n};\n\nAvatar.propTypes = {\n  altText: PropTypes.string,\n  darkMode: PropTypes.bool,\n  frame: PropTypes.oneOf([\n    CircleFrame,\n    RoundedFrame,\n    SquareFrame,\n    ThumbnailFrame\n  ]),\n  imageUrl: PropTypes.string.isRequired\n};\n","// Default avatar URL\nexport const AvatarUrl =\n  \"https://avatars1.githubusercontent.com/u/3941955?s=460&v=4\";\n\n// Avatar available frame types\nexport const CircleFrame = \"circle\";\nexport const RoundedFrame = \"rounded\";\nexport const SquareFrame = \"square\";\nexport const ThumbnailFrame = \"img-thumbnail\";\n","import React, { Component } from \"react\";\nimport Sidebar from \"components/sidebar/Sidebar\";\nimport Avatar from \"components/avatar/Avatar\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leftSidebarOpen: true,\n      rightSidebarOpen: true\n    };\n  }\n  toggleSidebar = sidebar => {\n    let value = this.state[sidebar + \"SidebarOpen\"];\n    let state = this.state;\n    state[sidebar + \"SidebarOpen\"] = !value;\n    this.setState(state);\n  };\n  render() {\n    return (\n      <Container fluid={true}>\n        <Row>\n          <Sidebar\n            open={this.state.leftSidebarOpen}\n            side={\"left\"}\n            toggleSidebar={() => this.toggleSidebar(\"left\")}\n          >\n            <div className=\"mt-3\">\n              <Avatar frame={'img-thumbnail'}/>\n            </div>\n          </Sidebar>\n          <Col className=\"main-content\" />\n          <Sidebar\n            open={this.state.rightSidebarOpen}\n            side={\"right\"}\n            toggleSidebar={() => this.toggleSidebar(\"right\")}\n          />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}